package com.oneshop.repository;

import com.oneshop.entity.Category;
import com.oneshop.entity.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long>, JpaSpecificationExecutor<Product> {

    // üèÜ Top s·∫£n ph·∫©m b√°n ch·∫°y (d·ª±a tr√™n t·ªïng soldCount c·ªßa c√°c variant)
    @Query("""
        SELECT p 
        FROM Product p 
        JOIN p.variants v 
        GROUP BY p 
        ORDER BY SUM(v.soldCount) DESC
    """)
    List<Product> findBestSellingProducts();

    // üå∏ S·∫£n ph·∫©m m·ªõi nh·∫•t
    List<Product> findTop8ByOrderByCreatedAtDesc();

    // üí∞ S·∫£n ph·∫©m gi√° t·ªët (t√πy theo c·ªôt price trong ProductVariant ho·∫∑c Product)
    // N·∫øu Product kh√¥ng c√≥ price, c√≥ th·ªÉ b·ªè d√≤ng n√†y
    // List<Product> findTop8ByOrderByPriceAsc();

    // üîç T√¨m theo t√™n
    Page<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);

    // üìÇ Theo danh m·ª•c
    Page<Product> findByCategory(Category category, Pageable pageable);

    // üí° D√†nh cho trang guest: ch·ªçn s·∫£n ph·∫©m c√≥ t·ªïng soldCount > 10
    @Query("""
        SELECT p 
        FROM Product p 
        JOIN p.variants v 
        GROUP BY p 
        HAVING SUM(v.soldCount) > 10 
        ORDER BY SUM(v.soldCount) DESC
    """)
    List<Product> findTopProductsForGuest();

    // ‚öôÔ∏è L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (ph√¢n trang)
    @Override
    Page<Product> findAll(Pageable pageable);

    // ‚öôÔ∏è L·ªçc theo tr·∫°ng th√°i hi·ªÉn th·ªã
    Page<Product> findByStatus(Boolean status, Pageable pageable);

    // ‚öôÔ∏è L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
    Product findByProductId(Long productId);
}
