package com.oneshop.controller;

import com.oneshop.entity.*;
import com.oneshop.repository.ProductVariantRepository;
import com.oneshop.repository.UserRepository;
import com.oneshop.service.CartService;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@Controller
@RequiredArgsConstructor
@RequestMapping("/cart")
public class CartController {

    private final CartService cartService;
    private final ProductVariantRepository variantRepository;
    private final UserRepository userRepository;

    // üõí Hi·ªÉn th·ªã gi·ªè h√†ng
    @GetMapping
    public String showCart(HttpSession session, Model model) {
        User user = (User) session.getAttribute("user");

        if (user != null) {
            Cart cart = cartService.getOrCreateCart(user);
            model.addAttribute("items", cart.getItems());
            model.addAttribute("total", cart.getTotalPrice());
        } else {
            List<Map<String, Object>> guestCart =
                    (List<Map<String, Object>>) session.getAttribute("guestCart");
            if (guestCart == null) guestCart = new ArrayList<>();

            model.addAttribute("items", guestCart);
            double total = guestCart.stream()
                    .mapToDouble(i -> (Double) i.get("subtotal"))
                    .sum();
            model.addAttribute("total", total);
        }

        return "cart";
    }

    // ‚ûï Th√™m s·∫£n ph·∫©m (AJAX)
    @PostMapping("/add")
    @ResponseBody
    public Map<String, Object> addToCartAjax(@RequestParam Long variantId,
                                             @RequestParam(defaultValue = "1") int quantity,
                                             HttpSession session) {
        User user = (User) session.getAttribute("user");
        ProductVariant variant = variantRepository.findById(variantId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!"));

        // ‚úÖ X·ª≠ l√Ω gi·ªè h√†ng cho kh√°ch (guest)
        List<Map<String, Object>> guestCart =
                (List<Map<String, Object>>) session.getAttribute("guestCart");
        if (guestCart == null) guestCart = new ArrayList<>();

        if (user != null) {
            // üßæ Ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
            cartService.addToCart(user, variantId, quantity);
        } else {
            // üßæ Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ‚Üí l∆∞u trong session
            Optional<Map<String, Object>> exist = guestCart.stream()
                    .filter(i -> i.get("variantId").equals(variantId))
                    .findFirst();

            if (exist.isPresent()) {
                // üîÑ N·∫øu ƒë√£ c√≥ c√πng variantId th√¨ c·ªông d·ªìn s·ªë l∆∞·ª£ng
                Map<String, Object> item = exist.get();
                int newQty = (int) item.get("quantity") + quantity;
                double price = (double) item.get("price");
                item.put("quantity", newQty);
                item.put("subtotal", price * newQty);
            } else {
                // üÜï Th√™m m·ªõi
                Map<String, Object> newItem = new HashMap<>();

                // üßæ L∆∞u t√™n hi·ªÉn th·ªã chi ti·∫øt ƒë·ªÉ tr√°nh g·ªôp c√°c bi·∫øn th·ªÉ c√πng s·∫£n ph·∫©m
                String displayName = variant.getProduct().getName();
                if (variant.getColor() != null || variant.getSize() != null) {
                    displayName += " - ";
                    if (variant.getColor() != null) displayName += variant.getColor();
                    if (variant.getSize() != null) displayName += " / " + variant.getSize();
                }

                newItem.put("productId", variant.getProduct().getProductId());
                newItem.put("variantId", variantId);
                newItem.put("name", displayName); // ‚úÖ t√™n ch·ª©a m√†u/size
                newItem.put("image", variant.getImageUrl());
                newItem.put("price", variant.getPrice().doubleValue());
                newItem.put("quantity", quantity);
                newItem.put("subtotal", variant.getPrice().doubleValue() * quantity);
                newItem.put("color", variant.getColor());
                newItem.put("size", variant.getSize());
                guestCart.add(newItem);
            }

            // ‚úÖ L∆∞u l·∫°i session sau m·ªói thay ƒë·ªïi
            session.setAttribute("guestCart", guestCart);
        }

        // ‚úÖ Tr·∫£ v·ªÅ JSON ƒë·ªÉ JS c·∫≠p nh·∫≠t ngay
        Map<String, Object> resp = new HashMap<>();
        if (user != null) {
            resp.put("cartCount", cartService.countItems(user));
            resp.put("total", cartService.calculateTotal(user));
        } else {
            double total = guestCart.stream().mapToDouble(i -> (Double) i.get("subtotal")).sum();

            // ‚úÖ FIX QUAN TR·ªåNG: ƒë·∫øm t·ªïng quantity, kh√¥ng ph·∫£i s·ªë item
            int totalQty = guestCart.stream().mapToInt(i -> (int) i.get("quantity")).sum();

            resp.put("cartCount", totalQty);
            resp.put("total", total);
        }
        return resp;
    }

    // üóë X√≥a item
    @PostMapping("/remove")
    public String removeItem(@RequestParam Long variantId, HttpSession session) {
        User user = (User) session.getAttribute("user");

        if (user != null) {
            cartService.removeItem(user, variantId);
        } else {
            List<Map<String, Object>> guestCart =
                    (List<Map<String, Object>>) session.getAttribute("guestCart");
            if (guestCart != null) {
                guestCart.removeIf(item -> item.get("variantId").equals(variantId));
                session.setAttribute("guestCart", guestCart);
            }
        }

        return "redirect:/cart";
    }

    // üßπ X√≥a to√†n b·ªô gi·ªè
    @PostMapping("/clear")
    public String clearCart(HttpSession session) {
        User user = (User) session.getAttribute("user");

        if (user != null) {
            cartService.clearCart(user);
        } else {
            session.removeAttribute("guestCart");
        }

        return "redirect:/cart";
    }

 // üí≥ Thanh to√°n (b·∫Øt bu·ªôc ƒëƒÉng nh·∫≠p)
    @GetMapping("/checkout")
    public String checkout(HttpSession session, Model model) {
        User sessionUser = (User) session.getAttribute("user");
        if (sessionUser == null) {
            return "redirect:/login?checkout=true";
        }

        // ‚úÖ D√πng fetch join ƒë·ªÉ load lu√¥n defaultAddress & addresses
        User user = userRepository.findById(sessionUser.getUserId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // üßæ L·∫•y gi·ªè h√†ng
        Cart cart = cartService.getOrCreateCart(user);
        model.addAttribute("items", cart.getItems());
        model.addAttribute("total", cart.getTotalPrice());

        // üè† X√°c ƒë·ªãnh ƒë·ªãa ch·ªâ giao h√†ng m·∫∑c ƒë·ªãnh
        OrderAddress defaultAddress = user.getDefaultAddress();

        if (defaultAddress == null) {
            // N·∫øu user ch∆∞a c√≥ defaultAddressId -> t√¨m d√≤ng c√≥ isDefault = 1
            for (OrderAddress addr : user.getAddresses()) {
                if (addr.isDefaultAddress()) {
                    defaultAddress = addr;
                    break;
                }
            }

            // N·∫øu v·∫´n kh√¥ng c√≥, l·∫•y ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n
            if (defaultAddress == null && !user.getAddresses().isEmpty()) {
                defaultAddress = user.getAddresses().iterator().next();
            }
        }

        model.addAttribute("defaultAddress", defaultAddress);

        return "account/checkout";
    }

    // üì¶ API ki·ªÉm tra tr·∫°ng th√°i gi·ªè (cho header mini-cart)
    @GetMapping("/api/status")
    @ResponseBody
    public Map<String, Object> getCartStatus(HttpSession session) {
        User user = (User) session.getAttribute("user");
        Map<String, Object> resp = new HashMap<>();

        if (user != null) {
            resp.put("cartCount", cartService.countItems(user));
            resp.put("total", cartService.calculateTotal(user));
        } else {
            List<Map<String, Object>> guestCart =
                    (List<Map<String, Object>>) session.getAttribute("guestCart");
            if (guestCart == null) guestCart = new ArrayList<>();

            double total = guestCart.stream().mapToDouble(i -> (Double) i.get("subtotal")).sum();
            int totalQty = guestCart.stream().mapToInt(i -> (int) i.get("quantity")).sum();

            resp.put("cartCount", totalQty);
            resp.put("total", total);
        }
        return resp;
    }
    
 // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
    @PostMapping("/update")
    @ResponseBody
    public Map<String, Object> updateQuantity(@RequestParam Long variantId,
                                              @RequestParam int quantity,
                                              HttpSession session) {
        Map<String, Object> resp = new HashMap<>();
        User user = (User) session.getAttribute("user");

        if (user != null) {
            // ‚úÖ N·∫øu l√† user ƒë√£ ƒëƒÉng nh·∫≠p
            cartService.updateItem(user, variantId, quantity);

            double itemSubtotal = cartService.getItemSubtotal(user, variantId);
            double total = cartService.calculateTotal(user);

            resp.put("itemSubtotal", itemSubtotal);
            resp.put("total", total);
        } else {
            // ‚úÖ N·∫øu l√† kh√°ch (guest)
            List<Map<String, Object>> guestCart =
                    (List<Map<String, Object>>) session.getAttribute("guestCart");
            if (guestCart == null) guestCart = new ArrayList<>();

            guestCart.forEach(item -> {
                if (item.get("variantId").equals(variantId)) {
                    item.put("quantity", quantity);
                    double price = (double) item.get("price");
                    item.put("subtotal", price * quantity);
                }
            });

            session.setAttribute("guestCart", guestCart);

            double total = guestCart.stream().mapToDouble(i -> (Double) i.get("subtotal")).sum();
            double itemSubtotal = guestCart.stream()
                    .filter(i -> i.get("variantId").equals(variantId))
                    .mapToDouble(i -> (Double) i.get("subtotal"))
                    .findFirst().orElse(0.0);

            resp.put("itemSubtotal", itemSubtotal);
            resp.put("total", total);
        }

        return resp;
    }

}
