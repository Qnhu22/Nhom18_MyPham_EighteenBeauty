package com.oneshop.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(
    name = "users",
    uniqueConstraints = {
        @UniqueConstraint(columnNames = {"username"}),
        @UniqueConstraint(columnNames = {"email"}),
        @UniqueConstraint(columnNames = {"phone"})
    }
)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    @Column(nullable = false, length = 50)
    private String username;

    @Column(nullable = false, length = 255)
    private String password; // ƒê√£ m√£ h√≥a b·∫±ng BCrypt

    @Column(length = 100)
    private String fullName;

    @Column(nullable = false, length = 100)
    private String email;

    @Column(length = 20)
    private String phone;

    @Column(length = 10)
    private String gender; // Nam / N·ªØ / Kh√°c

    @Column(length = 255)
    private String avatar; // ·∫¢nh ƒë·∫°i di·ªán

    @Column(nullable = false)
    private boolean active = false; // M·∫∑c ƒë·ªãnh false (ch∆∞a k√≠ch ho·∫°t OTP)

    // üîó FK ‚Üí order_addresses(addressId)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "defaultAddressId")
    private OrderAddress defaultAddress;

    @CreationTimestamp
    private LocalDateTime createAt; // Th·ªùi ƒëi·ªÉm t·∫°o t√†i kho·∫£n

    @UpdateTimestamp
    private LocalDateTime updateAt; // Th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t g·∫ßn nh·∫•t

    @Column(length = 10)
    private String otpCode;

    private LocalDateTime otpExpiry;

    @Column(length = 255)
    private String note; // Ghi ch√∫ n·ªôi b·ªô

    private LocalDateTime lastLogin; // L·∫ßn ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t

    // ================== QUAN H·ªÜ ==================

    // 1Ô∏è‚É£ Danh s√°ch vai tr√≤ (Admin, User, Shipper,...)
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private Set<Role> roles = new HashSet<>();

    // 2Ô∏è‚É£ Danh s√°ch ƒë·ªãa ch·ªâ giao h√†ng c·ªßa user
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<OrderAddress> addresses = new HashSet<>();
    
    @OneToOne(mappedBy = "manager")
    private Shop shop;

}
