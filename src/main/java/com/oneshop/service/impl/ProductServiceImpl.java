package com.oneshop.service.impl;

import com.oneshop.entity.Category;
import com.oneshop.entity.Product;
import com.oneshop.entity.ProductVariant;
import com.oneshop.repository.ProductRepository;
import com.oneshop.repository.ProductVariantRepository;
import com.oneshop.service.ProductService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional
public class ProductServiceImpl implements ProductService {

    private final ProductRepository productRepository;
    private final ProductVariantRepository variantRepository;

    /* =====================================================
       üì¶ L·∫•y th√¥ng tin s·∫£n ph·∫©m
       ===================================================== */
    @Override
    public Optional<Product> getProductById(Long id) {
        // L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
        return productRepository.findById(id);
    }

    @Override
    public void deleteProduct(Long id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a"));

        // X√≥a variant tr∆∞·ªõc (tr√°nh l·ªói kh√≥a ngo·∫°i)
        List<ProductVariant> variants = variantRepository.findByProduct(product);
        variantRepository.deleteAll(variants);

        productRepository.delete(product);
    }

    /* =====================================================
       üè† Feed trang ch·ªß
       ===================================================== */

    /** üåü S·∫£n ph·∫©m n·ªïi b·∫≠t (rating cao ho·∫∑c b√°n ch·∫°y) */
    @Override
    public List<Product> getHighlightedProducts() {
        // ∆Øu ti√™n rating cao > sau ƒë√≥ l·∫•y th·ªùi gian t·∫°o m·ªõi nh·∫•t
        return productRepository.findAll().stream()
                .sorted(Comparator
                        .comparing(Product::getRating, Comparator.nullsLast(Comparator.reverseOrder()))
                        .thenComparing(Product::getCreatedAt, Comparator.nullsLast(Comparator.reverseOrder())))
                .limit(8)
                .toList();
    }

    /** üèÜ Top b√°n ch·∫°y */
    @Override
    public List<Product> getBestSellerProducts() {
        return productRepository.findBestSellingProducts();
    }

    /** üÜï S·∫£n ph·∫©m m·ªõi nh·∫•t */
    @Override
    public List<Product> getNewProducts() {
        return productRepository.findTop8ByOrderByCreatedAtDesc();
    }

    /** üí∞ S·∫£n ph·∫©m gi√° t·ªët (gi·∫£m gi√° ho·∫∑c variant c√≥ oldPrice > price) */
    @Override
    public List<Product> getBestDeals() {
        // L·ªçc s·∫£n ph·∫©m c√≥ √≠t nh·∫•t 1 variant gi·∫£m gi√°
        return productRepository.findAll().stream()
                .filter(p -> p.getVariants() != null && p.getVariants().stream()
                        .anyMatch(v -> v.getOldPrice() != null &&
                                v.getPrice() != null &&
                                v.getOldPrice().compareTo(v.getPrice()) > 0))
                .sorted(Comparator.comparing(
                        (Product p) -> p.getCreatedAt(), Comparator.nullsLast(Comparator.reverseOrder()))
                )
                .limit(8)
                .toList();
    }

    /** üë• Feed cho kh√°ch (guest) */
    @Override
    public List<Product> getTopProductsForGuest() {
        return productRepository.findTopProductsForGuest();
    }

    /* =====================================================
       üîç T√¨m ki·∫øm & ph√¢n trang
       ===================================================== */
    @Override
    public Page<Product> getProductsByName(String keyword, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return productRepository.findByNameContainingIgnoreCase(keyword, pageable);
    }

    @Override
    public Page<Product> getProductsByCategory(Category category, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return productRepository.findByCategory(category, pageable);
    }

    @Override
    public Page<Product> getAllProducts(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return productRepository.findAll(pageable);
    }

    @Override
    public Page<Product> getProductsByStatus(Boolean status, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return productRepository.findByStatus(status, pageable);
    }

    /* =====================================================
       ‚öôÔ∏è Qu·∫£n l√Ω s·∫£n ph·∫©m (admin)
       ===================================================== */
    @Override
    public List<Product> getBestSellingProducts() {
        return productRepository.findBestSellingProducts();
    }

    @Override
    public Product saveProduct(Product product) {
        // üß© L∆∞u product
        Product savedProduct = productRepository.save(product);

        // üß© L∆∞u variant k√®m theo (n·∫øu c√≥)
        if (product.getVariants() != null && !product.getVariants().isEmpty()) {
            for (ProductVariant variant : product.getVariants()) {
                variant.setProduct(savedProduct);
                if (variant.getCreatedAt() == null) {
                    variant.setCreatedAt(LocalDateTime.now());
                }
                variantRepository.save(variant);
            }
        }

        return savedProduct;
    }

    @Override
    public boolean existsById(Long productId) {
        return productRepository.existsById(productId);
    }

    /** üîó L·∫•y danh s√°ch variant theo s·∫£n ph·∫©m */
    @Override
    public List<ProductVariant> getVariantsByProduct(Product product) {
        return variantRepository.findByProduct(product);
    }

    /* =====================================================
       üí° H·ªó tr·ª£ hi·ªÉn th·ªã gi√° min‚Äìmax
       ===================================================== */
    @Override
    public String getPriceRange(Product product) {
        if (product.getVariants() == null || product.getVariants().isEmpty()) {
            return "‚Ç´0";
        }

        double min = product.getVariants().stream()
                .filter(v -> v.getPrice() != null)
                .map(v -> v.getPrice().doubleValue())
                .min(Comparator.naturalOrder())
                .orElse(0.0);

        double max = product.getVariants().stream()
                .filter(v -> v.getPrice() != null)
                .map(v -> v.getPrice().doubleValue())
                .max(Comparator.naturalOrder())
                .orElse(min);

        if (min == max) {
            return String.format("‚Ç´%,.0f", min);
        } else {
            return String.format("‚Ç´%,.0f - ‚Ç´%,.0f", min, max);
        }
    }
    
    @Override
    public Page<Product> getAllProducts(int page, int size, String sortKey) {
        List<Product> all = productRepository.findAll();
        all.sort(getComparator(sortKey));
        int start = page * size;
        int end = Math.min(start + size, all.size());
        List<Product> paged = all.subList(start, end);
        return new PageImpl<>(paged, PageRequest.of(page, size), all.size());
    }

    @Override
    public Page<Product> getProductsByCategory(Category category, int page, int size, String sortKey) {
        // T·∫°o b·∫£n sao c√≥ th·ªÉ s·∫Øp x·∫øp
        List<Product> list = new ArrayList<>(productRepository.findByCategory(category, Pageable.unpaged()).getContent());
        
        list.sort(getComparator(sortKey)); // s·∫Øp x·∫øp an to√†n
        int start = page * size;
        int end = Math.min(start + size, list.size());
        List<Product> paged = list.subList(start, end);
        return new PageImpl<>(paged, PageRequest.of(page, size), list.size());
    }


    /* üîç Comparator h·ªó tr·ª£ sort theo variant price */
    private Comparator<Product> getComparator(String sortKey) {
        if (sortKey == null || sortKey.isBlank()) {
            return Comparator.comparing(Product::getProductId).reversed();
        }

        return switch (sortKey) {
            case "newest" -> Comparator.comparing(Product::getCreatedAt, Comparator.nullsLast(Comparator.reverseOrder()));
            case "bestseller" -> Comparator.comparing(
                    (Product p) -> p.getVariants() != null
                            ? p.getVariants().stream().mapToInt(v -> v.getSoldCount() != null ? v.getSoldCount() : 0).sum()
                            : 0
            ).reversed();
            case "priceAsc" -> Comparator.comparingDouble(this::getMinPrice);
            case "priceDesc" -> Comparator.comparingDouble(this::getMinPrice).reversed();
            case "nameAsc" -> Comparator.comparing(Product::getName, String.CASE_INSENSITIVE_ORDER);
            default -> Comparator.comparing(Product::getProductId).reversed();
        };
    }

    /* üßÆ L·∫•y gi√° nh·ªè nh·∫•t c·ªßa product ƒë·ªÉ sort */
    private double getMinPrice(Product p) {
        if (p.getVariants() == null || p.getVariants().isEmpty()) return 0;
        return p.getVariants().stream()
                .filter(v -> v.getPrice() != null)
                .mapToDouble(v -> v.getPrice().doubleValue())
                .min().orElse(0);
    }

}
